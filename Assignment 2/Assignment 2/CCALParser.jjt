//******** SECTION 1 - OPTIONS **********//

options {
    JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;

    MULTI = true;
    VISITOR = true;
    NODE_PREFIX = "";
    NODE_DEFAULT_VOID = true;
}

//******** SECTION 2 - USER CODE ********//

PARSER_BEGIN(CCALParser)

public class CCALParser
{
    
    public static SymbolTable st = new SymbolTable();
    public static String scope = "global";

    public static void main (String args[])
    {

        CCALParser parser;

        if (args.length == 0) {

            System.out.println ("Reading from standard input...");
            parser = new CCALParser(System.in);
        }

	      else if (args.length == 1) {
            try {
                parser = new CCALParser(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.err.println ("File " + args[0] + " not found.");
                return;
            }
        }
	
        else {
            System.out.println ("CCALParser: Usage is one of:");
            System.out.println ("java CCALParser < inputfile");
            System.out.println ("OR");
            System.out.println ("java CCALParser inputfile");
            return;
        }

        try {
            System.out.println("");
            System.out.println("Printing Abstract Syntax Tree...");
            SimpleNode root = parser.program();
            root.dump("");

            System.out.println("");
            System.out.println("Printing Symbol Table...");
            st.printST();

            System.out.println("");
            System.out.println("Printing Semantic checks Results...");
            SemanticChecks sc = new SemanticChecks();
            root.jjtAccept(sc, st);

            System.out.println("");
            System.out.println("Printing IR Code Generation...");
            IRGenerator irgen = new IRGenerator();
            root.jjtAccept(irgen, null);
          
         }


	      catch (ParseException e) {
            System.out.println ("CCAL language parse error:");
            System.out.println (e.getMessage());
        }
    }
}

PARSER_END(CCALParser)


//********* SECTION 3 - TOKEN DEFINITIONS ************//

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : /* Ignoring whitespace characters, tabs and newlines */
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

/******* skip single line comments or change to skipping multi-line comments *******/
SKIP :
{
  < "//" (~["\n"])* "\n">
  | "/*" { commentNesting++; } : IN_COMMENT
}

/******* multi-line comment skipping *******/
<IN_COMMENT> SKIP :
{
  "/*" { commentNesting++;}
  | "*/" {commentNesting--; if (commentNesting==0) SwitchTo(DEFAULT);}
  | <~[]>
}


TOKEN : /* Other tokens */
{
	  < COMMA : "," >
	| < SEMICOL : ";" >
	| < COLON : ":" >
	| < EQU : "=" >
	| < LEFT_CURL : "{" >
	| < RIGHT_CURL : "}" >
	| < LEFT_BR : "(" >
	| < RIGHT_BR : ")" >
	| < PLUS_SIGN : "+" >
	| < MINUS_SIGN : "-" >
	| < LOG_NEG : "~" >
	| < LOG_OR : "||" >
	| < LOG_AND : "&&" >
	| < IS_EQU : "==" >
	| < NOT_EQU : "!=" >
	| < LESS_THAN : "<" >
	| < LESS_EQU : "<=" >
	| < GREAT_THAN : ">" >
	| < GREAT_EQU : ">=" >

}

TOKEN : /* Reserved Words */
{
	  < VAR : "var" >
	| < CONST : "const" >
	| < RETURN : "return" >
	| < INT : "integer" >
	| < BOOL : "boolean" >
	| < VOID : "void" >
	| < MAIN : "main" >
	| < IF : "if" >
	| < ELSE : "else" >
	| < TRUE : "true" >
	| < FALSE : "false" >
	| < WHILE : "while" >
	| < SKIPP : "skip" >	
}

TOKEN : /* Numbers and identifiers */
{
    < NUM : ("0" | (<MINUS_SIGN> ["1" - "9"] (<DIGIT>)*) | (["1" - "9"] (<DIGIT>)*)) >
  | < #DIGIT : ["0" - "9"] >
  | < ID : (<CHAR>) (<CHAR> | <DIGIT> | "_")* >
  | < #CHAR : ["a" - "z"] >
}

TOKEN : /* Anything not recognised so far*/
{
    < OTHER : ~[] >
}

/***********************************
 ***** SECTION 4 - THE GRAMMAR *****
 ***********************************/

SimpleNode program() #Program : {}
{
    decl_list() function_list() main() <EOF> 
    {return jjtThis;}
}

void decl_list() : {}
{
    decl() <SEMICOL> decl_list()
  | {}
}

void decl() : {}
{
    var_decl()
  | const_decl()
}

void var_decl() #Variable : {Token t; String id; String type;}
{
    t = <VAR> id = identifier() <COLON> type = type() {st.insert(id, "var", type, scope);}
}

void const_decl() #Constant : {Token t; String id; String type;}
{
    t = <CONST> id = identifier() <COLON> type = type() <EQU> expression() {jjtThis.value = t.image; st.insert(id, "const", type, scope);}
}

void function_list() : {}
{
      function() function_list()
    | {}
}

void function() #Function : {String id; String type;}
{
    type = type() id = identifier() {st.insert(id, "function", type, scope); scope = id;} <LEFT_BR> parameter_list() <RIGHT_BR> 
    <LEFT_CURL>
    decl_list()
    statement_block()
    <RETURN> <LEFT_BR> (expression() | {}) <RIGHT_BR> <SEMICOL>
    <RIGHT_CURL>
}

String type() #Type : {Token t;}
{
    t = <INT> {jjtThis.value = t.image; return t.image;} 
  | t = <BOOL> {jjtThis.value = t.image; return t.image;}
  | t = <VOID> {jjtThis.value = t.image; return t.image;}
}

void parameter_list() #ParameterList : {}
{
    nemp_parameter_list() (<COMMA> nemp_parameter_list() | {})
  | {}
}

void nemp_parameter_list() #NempParamList : {String id; String type;}
{
    id = identifier() <COLON> type = type() {st.insert(id, "parameter", type, scope);}
}

void main() #Main : {Token t;}
{
    {scope = "main";} 
    t = <MAIN>
    <LEFT_CURL> 
    decl_list() 
    statement_block() 
    <RIGHT_CURL>
}

void statement_block() : {}
{
    statement() statement_block()
  | {}
}

void statement() : {Token t;}
{
    (identifier() ((t = <EQU> expression() <SEMICOL> {jjtThis.value = t.image;}) | (<LEFT_BR> arg_list() <RIGHT_BR> <SEMICOL>))) #Assign(2)
  | (<LEFT_CURL> statement_block() <LEFT_CURL>)
  | (t = <IF> condition() <LEFT_CURL> statement_block() <RIGHT_CURL> <ELSE> <LEFT_CURL> statement_block() <RIGHT_CURL> {jjtThis.value = t.image;}) #Statement
  | (t = <WHILE> condition() <LEFT_CURL> statement_block() <RIGHT_CURL> {jjtThis.value = t.image;}) #Statement
  | (<SKIPP> <SEMICOL>)
}

void expression() : {}
{
    (fragment() binary_arith_op())
  | (<LEFT_BR> expression() <RIGHT_BR> binary_arith_op())
}

void binary_arith_op() : {Token t;}
{
    t = <PLUS_SIGN> expression() {jjtThis.value = t.image;} #Add(2)
  | t = <MINUS_SIGN> expression() {jjtThis.value = t.image;} #Sub(2)
  | {}
}

void fragment() : {}
{
    identifier() (<LEFT_BR> arg_list() <RIGHT_BR> | {})
  | <MINUS_SIGN> identifier()
  | num()
  | bool()
}

void bool() #Bool : {Token t;}
{
    (t = <TRUE> | t = <FALSE>) {jjtThis.value = t.image;}
}

void num() #Num : {Token t;}
{
    t = <NUM> {jjtThis.value = t.image;}
}

void condition() : {}
{
    LOOKAHEAD(3)
    <LEFT_BR> condition() <RIGHT_BR> condition_choice()
  | <LOG_NEG> condition() condition_choice()
  | expression() comp_op() condition_choice()
}

void condition_choice() : {Token t;}
{
    t = <LOG_OR> condition() {jjtThis.value = t.image;} #LogOr(2)
  | t = <LOG_AND> condition() {jjtThis.value = t.image;} #LogAnd(2) 
  | {}
}

void comp_op() : {Token t;}
{
    t = <IS_EQU> expression() {jjtThis.value = t.image;} #IsEqu(2)
  | t = <NOT_EQU> expression() {jjtThis.value = t.image;} #NotEqu(2)
  | t = <LESS_THAN> expression() {jjtThis.value = t.image;} #LessThan(2)
  | t = <LESS_EQU> expression() {jjtThis.value = t.image;} #LessEqu(2)
  | t = <GREAT_THAN> expression() {jjtThis.value = t.image;} #GreatThan(2)
  | t = <GREAT_EQU> expression() {jjtThis.value = t.image;} #GreatEqu(2)
}

void arg_list() : {}
{
    nemp_arg_list()
  | {}
}

void nemp_arg_list() : {}
{
    identifier() (<COMMA> nemp_arg_list() | {}) #ArgList(>1)
}

String identifier() #Identifier : {Token t;}
{
    t = <ID> 
    {jjtThis.value = t.image; return t.image;}
}
